# handlers/captcha_handler.py
import random
import logging
from aiogram import types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bot import bot, router
from config import ADMIN_IDS
from handlers.subscription import check_subscription, get_subscription_keyboard, get_not_subscribed_channels, \
    get_channels_text
from utils import save_users_data, get_stars_word, save_referral_data, load_json_data

# –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∫–∞–ø—á–∏
CAPTCHA_WORDS = [
    "–∑–≤–µ–∑–¥–∞", "–ø–ª–∞–Ω–µ—Ç–∞", "–∫–æ—Å–º–æ—Å", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "–≤—Å–µ–ª–µ–Ω–Ω–∞—è",
    "—Ä–∞–∫–µ—Ç–∞", "—Å–ø—É—Ç–Ω–∏–∫", "–∫–æ–º–µ—Ç–∞", "–∞—Å—Ç–µ—Ä–æ–∏–¥", "–º–µ—Ç–µ–æ—Ä–∏—Ç",
    "—Å–æ–ª–Ω—Ü–µ", "–ª—É–Ω–∞", "–∑–µ–º–ª—è", "–º–∞—Ä—Å", "—é–ø–∏—Ç–µ—Ä",
    "—Å–∞—Ç—É—Ä–Ω", "—É—Ä–∞–Ω", "–Ω–µ–ø—Ç—É–Ω", "–ø–ª—É—Ç–æ–Ω", "–º–µ—Ä–∫—É—Ä–∏–π",
    "–≤–µ–Ω–µ—Ä–∞", "–æ—Ä–±–∏—Ç–∞", "—Å–æ–∑–≤–µ–∑–¥–∏–µ", "—Ç–µ–ª–µ—Å–∫–æ–ø", "–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è", "–¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—ç–∫–æ–Ω–æ–º–∏–∫–∞"
]


class CaptchaStates(StatesGroup):
    waiting_for_captcha = State()


def get_referrer_for_user(user_id: str, referral_data: dict) -> str | None:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param referral_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    :return: ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–ª–∏ None
    """
    for potential_referrer_id, info in referral_data.items():
        referral_activations = info.get("referral_activations", [])
        if user_id in referral_activations:
            return potential_referrer_id
    return None


async def generate_captcha() -> tuple[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–∞–ø—á–∏.

    Returns:
        tuple: (captcha_word, captcha_message)
    """
    captcha_word = random.choice(CAPTCHA_WORDS)
    captcha_message = (
        "üîê <b>–ö–∞–ø—á–∞-–ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: <b>{captcha_word}</b>\n\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤."
    )
    return captcha_word, captcha_message


@router.message(CaptchaStates.waiting_for_captcha)
async def process_captcha(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–ø—á—É.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from data import (
        referral_data, users_data,
        captcha_passed_referrals,
        save_captcha_passed_referrals, credited_referrals,
        save_credited_referrals
    )

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /admin –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤, —Å—Ä–∞–∑—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–ø—á–∏
    if message.text == "/admin" and message.from_user.id in ADMIN_IDS:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        await state.clear()
        await state.update_data(captcha_passed=True)
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, –Ω–æ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        # –¢–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ø—á–∏
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–∞–ø—á–∏
    if message.text and message.text.startswith('/'):
        # –î–ª—è –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø—á–∏ –∏ –¥–∞–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        await state.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        await state.update_data(captcha_passed=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞
    special_buttons = ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚≠ê –û—Ç–∑—ã–≤—ã", "üéü –ü—Ä–æ–º–æ–∫–æ–¥", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üì¢ –ö–∞–Ω–∞–ª"]
    if message.text in special_buttons:
        # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø—á–∏ –∏ –¥–∞–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
        await state.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        await state.update_data(captcha_passed=True)
        return

    user_text = message.text.strip().lower()
    data = await state.get_data()
    captcha_word = data.get("captcha_word", "").lower()

    if user_text == captcha_word:
        # –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        user_id = str(message.from_user.id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        ref_data = await state.get_data()
        referrer_id = ref_data.get("referrer_id")
        logging.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {referrer_id}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if not referrer_id:
            referrer_id = get_referrer_for_user(user_id, referral_data)
            logging.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {referrer_id}")

        # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –±—ã–ª –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª
        if referrer_id and referrer_id in users_data and user_id not in captcha_passed_referrals and user_id not in credited_referrals:
            logging.info(f"–ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {referrer_id} –ø–æ—Å–ª–µ –∫–∞–ø—á–∏")

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∏ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª
            captcha_passed_referrals.add(user_id)
            save_captcha_passed_referrals()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∫–∞–ø—á—É")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            credited_referrals.add(user_id)
            save_credited_referrals()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            if referrer_id in referral_data:
                referral_data[referrer_id]["count"] = referral_data[referrer_id].get("count", 0) + 1
                logging.info(
                    f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è {referrer_id} –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏: {referral_data[referrer_id]['count']}")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if "referral_activations" not in referral_data[referrer_id]:
                    referral_data[referrer_id]["referral_activations"] = []

                if user_id not in referral_data[referrer_id]["referral_activations"]:
                    referral_data[referrer_id]["referral_activations"].append(user_id)
            else:
                referral_data[referrer_id] = {
                    "bot_link": f"https://t.me/{(await bot.get_me()).username}?start={referrer_id}",
                    "count": 1,
                    "username": users_data.get(referrer_id, {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    "referral_activations": [user_id]
                }
                logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {referrer_id}")

            save_referral_data(referral_data)
            logging.info(f"–î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            if referrer_id in users_data:
                # –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞
                stars_config = load_json_data("data/config.json")
                current_stars_per_referral = stars_config.get("stars_per_referral",
                                                              2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logging.info(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞): {current_stars_per_referral}")

                current_stars = users_data[referrer_id].get("stars", 0)
                users_data[referrer_id]["stars"] = current_stars + current_stars_per_referral
                save_users_data(users_data)
                logging.info(
                    f"–ù–∞—á–∏—Å–ª–µ–Ω—ã –∑–≤–µ–∑–¥—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {current_stars_per_referral}, –≤—Å–µ–≥–æ: {users_data[referrer_id]['stars']}")

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    await bot.send_message(
                        int(referrer_id),
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or message.from_user.full_name} –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
                        f"üí´ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {current_stars_per_referral} {get_stars_word(current_stars_per_referral)}\n"
                        f"üí´ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_data[referrer_id]['stars']} {get_stars_word(users_data[referrer_id]['stars'])}"
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        await state.update_data(captcha_passed=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        is_subscribed = await check_subscription(message.from_user.id)

        if not is_subscribed:
            not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
            channels_text = get_channels_text(not_subscribed_channels)

            text = (
                '‚úÖ <b>–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!</b>\n\n'
                f'–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n'
                f'{channels_text}'
            )
            await message.answer(text, reply_markup=get_subscription_keyboard())
        else:
            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
            from handlers.start import show_main_menu
            await show_main_menu(message)
    else:
        # –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é
        captcha_word, captcha_message = await generate_captcha()
        await state.update_data(captcha_word=captcha_word)
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n{captcha_message}"
        )