# handlers/admin.py
import os
import tempfile
import asyncio
import logging
from aiogram import types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ChatAdministratorRights
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bot import bot, router
from config import ADMIN_IDS
from data import (
    referral_data, users_data, stars_per_referral, save_stars_config,
    promocodes, save_promocodes, required_channels, save_required_channels
)
from utils import get_invite_word, save_referral_data, get_stars_word, save_users_data


class AdminStates(StatesGroup):
    waiting_for_stars_value = State()
    waiting_for_broadcast = State()
    waiting_for_promo_code = State()
    waiting_for_promo_stars = State()
    waiting_for_promo_limit = State()
    waiting_for_channel_id = State()
    waiting_for_channel_link = State()
    waiting_for_channel_name = State()
    waiting_for_edit_channel_id = State()


# –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–º–∞–Ω–¥—ã admin, —á—Ç–æ–±—ã –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
@router.message(Command("admin"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_admin(message: types.Message) -> None:
    total_users = len(users_data)
    active_users = sum(1 for u in users_data.values() if u.get("status") == "active")
    removed_users = sum(1 for u in users_data.values() if u.get("status") == "removed")
    total_stars = sum(u.get("stars", 0) for u in users_data.values())
    total_channels = len(required_channels)

    admin_text = (
        "üìä <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>\n"
        f"–£–¥–∞–ª–∏–ª–∏ –±–æ—Ç–∞: <b>{removed_users}</b>\n"
        f"–í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –≤ –æ–±–æ—Ä–æ—Ç–µ: <b>{total_stars}</b>\n"
        f"–ó–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: <b>{stars_per_referral}</b>\n"
        f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: <b>{total_channels}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="download_referrals")],
        [InlineKeyboardButton(text="üìã –°–∫–∞—á–∞—Ç—å –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤", callback_data="download_users")],
        [InlineKeyboardButton(text="‚≠ê –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="change_stars_value")],
        [InlineKeyboardButton(text="üéü –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promo")],
        [InlineKeyboardButton(text="üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton(text="üí¨ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")]
    ])
    await message.answer(admin_text, reply_markup=inline_kb)


@router.message(Command("referrals"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_referrals(message: types.Message) -> None:
    sorted_refs = sorted(referral_data.items(), key=lambda item: item[1].get("count", 0), reverse=True)
    top10 = sorted_refs[:10]
    if not top10:
        text = "–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    else:
        text = "üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>:\n\n"
        rank = 1
        for user_id, info in top10:
            username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            count = info.get("count", 0)
            stars = users_data.get(user_id, {}).get("stars", 0)
            text += f"{rank}. <a href='tg://user?id={user_id}'>{username}</a> ‚Äî {count} {get_invite_word(count)}, {stars} {get_stars_word(stars)}\n"
            rank += 1
    await message.answer(text)


@router.callback_query(F.data == "download_referrals")
async def callback_download_referrals(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    lines = []
    for user_id, info in referral_data.items():
        username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        count = info.get("count", 0)
        bot_link = info.get("bot_link", "")
        stars = users_data.get(user_id, {}).get("stars", 0)
        line = f"–ò–º—è: {username}, ID: {user_id}, –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count} {get_invite_word(count)}, –ó–≤–µ–∑–¥: {stars}, –°—Å—ã–ª–∫–∞: {bot_link}"
        lines.append(line)

    text_content = "\n".join(lines) if lines else "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞."

    with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding="utf-8") as tmp:
        tmp.write(text_content)
        tmp_path = tmp.name

    document = FSInputFile(tmp_path)
    await bot.send_document(
        chat_id=callback.from_user.id,
        document=document,
        caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"
    )

    os.remove(tmp_path)
    await callback.answer()


@router.callback_query(F.data == "download_users")
async def callback_download_users(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    lines = []
    for user_id, info in users_data.items():
        username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        status = info.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        stars = info.get("stars", 0)
        user_link = f"tg://user?id={user_id}"
        line = f"–ò–º—è: {username}, –°—Ç–∞—Ç—É—Å: {status}, –ó–≤–µ–∑–¥: {stars}, –°—Å—ã–ª–∫–∞: {user_link}"
        lines.append(line)

    text_content = "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."

    with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding="utf-8") as tmp:
        tmp.write(text_content)
        tmp_path = tmp.name

    document = FSInputFile(tmp_path)
    await bot.send_document(
        chat_id=callback.from_user.id,
        document=document,
        caption="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    os.remove(tmp_path)
    await callback.answer()


@router.callback_query(F.data == "change_stars_value")
async def callback_change_stars(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä—è–º–æ –∏–∑ —Ñ–∞–π–ª–∞
    from utils import load_json_data
    stars_config = load_json_data("data/config.json")
    current_value = stars_config.get("stars_per_referral", 2)

    await callback.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: <b>{current_value}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
    )
    await state.set_state(AdminStates.waiting_for_stars_value)
    await callback.answer()


@router.message(AdminStates.waiting_for_stars_value)
async def process_stars_value(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_value = int(message.text.strip())
        if new_value <= 0:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ñ–∞–π–ª–µ
        from utils import save_json_data
        save_json_data("data/config.json", {"stars_per_referral": new_value})

        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global stars_per_referral
        stars_per_referral = new_value

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        from utils import load_json_data
        stars_config = load_json_data("data/config.json")
        saved_value = stars_config.get("stars_per_referral", 0)

        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{saved_value}</b>")
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
    except Exception as e:
        # –î–æ–±–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        import traceback
        error_details = traceback.format_exc()
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: {error_details}")


@router.message(AdminStates.waiting_for_stars_value)
async def process_stars_value(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_value = int(message.text.strip())
        if new_value <= 0:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        global stars_per_referral
        stars_per_referral = new_value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        save_stars_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        from utils import load_json_data
        stars_config = load_json_data("data/config.json")
        saved_value = stars_config.get("stars_per_referral", 0)

        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{saved_value}</b>")
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.message(AdminStates.waiting_for_stars_value)
async def process_stars_value(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        new_value = int(message.text.strip())
        if new_value <= 0:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        global stars_per_referral
        stars_per_referral = new_value
        save_stars_config()

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ data.py
        from data import update_stars_per_referral
        updated_value = update_stars_per_referral()

        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{updated_value}</b>")
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data == "create_promo")
async def callback_create_promo(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_type_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)", callback_data="promo_type_single")],
        [InlineKeyboardButton(text="–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)", callback_data="promo_type_unlimited")],
        [InlineKeyboardButton(text="–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π", callback_data="promo_type_limited")]
    ])

    await callback.message.answer(
        "üéü <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        reply_markup=promo_type_kb
    )
    await callback.answer()


@router.callback_query(F.data.startswith("promo_type_"))
async def callback_promo_type(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    promo_type = callback.data.split("_")[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.update_data(promo_type=promo_type)

    await callback.message.answer(
        "üéü <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):"
    )
    await state.set_state(AdminStates.waiting_for_promo_code)
    await callback.answer()


@router.message(AdminStates.waiting_for_promo_code)
async def process_promo_code(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    promo_code = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if not promo_code.isalnum():
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if promo_code in promocodes:
        await message.answer("–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
    await state.update_data(promo_code=promo_code)
    await message.answer(
        f"–ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo_code}</b> –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É:"
    )
    await state.set_state(AdminStates.waiting_for_promo_stars)


@router.message(AdminStates.waiting_for_promo_stars)
async def process_promo_stars(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        stars = int(message.text.strip())
        if stars <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        promo_code = data.get("promo_code")
        promo_type = data.get("promo_type", "single")

        # –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        if promo_type == "limited":
            await state.update_data(promo_stars=stars)
            await message.answer(
                f"–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <b>{promo_code}</b>:"
            )
            await state.set_state(AdminStates.waiting_for_promo_limit)
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if promo_type == "single":
            promocodes[promo_code] = {
                "stars": stars,
                "is_single_use": True,
                "used_by": []
            }
        elif promo_type == "unlimited":
            promocodes[promo_code] = {
                "stars": stars,
                "is_single_use": False,
                "unlimited": True,
                "activations": 0,
                "used_by": []
            }

        save_promocodes()

        promo_type_text = {
            "single": "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
            "unlimited": "–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)",
            "limited": "—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π"
        }

        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo_code}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–¢–∏–ø: {promo_type_text.get(promo_type, '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}\n"
            f"–ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç {stars} {get_stars_word(stars)}."
        )
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.message(AdminStates.waiting_for_promo_limit)
async def process_promo_limit(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        limit = int(message.text.strip())
        if limit <= 0:
            await message.answer("–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        promo_code = data.get("promo_code")
        stars = data.get("promo_stars")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        promocodes[promo_code] = {
            "stars": stars,
            "is_single_use": False,
            "limit": limit,
            "activations": 0,
            "used_by": []
        }
        save_promocodes()

        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo_code}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–¢–∏–ø: —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ {limit} –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n"
            f"–ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç {stars} {get_stars_word(stars)}."
        )
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data == "create_broadcast")
async def callback_create_broadcast(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b> \n"
        "- <b>–¢–µ–∫—Å—Ç</b> (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–§–æ—Ç–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–í–∏–¥–µ–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–î–æ–∫—É–º–µ–Ω—Ç</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–ê—É–¥–∏–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
    )
    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.answer()


@router.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
    ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ FSM
    if message.photo:
        await state.update_data(type="photo", file_id=message.photo[-1].file_id, caption=message.caption or "")
        await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=inline_kb)
    elif message.video:
        await state.update_data(type="video", file_id=message.video.file_id, caption=message.caption or "")
        await message.answer("üé¨ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=inline_kb)
    elif message.document:
        await state.update_data(type="document", file_id=message.document.file_id, caption=message.caption or "")
        await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=inline_kb)
    elif message.audio:
        await state.update_data(type="audio", file_id=message.audio.file_id, caption=message.caption or "")
        await message.answer("üéµ –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=inline_kb)
    elif message.voice:
        await state.update_data(type="voice", file_id=message.voice.file_id, caption=message.caption or "")
        await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=inline_kb)
    elif message.video_note:
        await state.update_data(type="video_note", file_id=message.video_note.file_id)
        await message.answer("üìπ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=inline_kb)
    elif message.text:
        await state.update_data(type="text", text=message.text)
        await message.answer(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:\n\n{message.text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
                             reply_markup=inline_kb)
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return


@router.callback_query(F.data == "confirm_broadcast")
async def callback_confirm_broadcast(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    data = await state.get_data()
    message_type = data.get("type")

    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    sent_count = 0
    error_count = 0

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    progress_message = await callback.message.edit_text("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    total_users = sum(1 for user_id, info in users_data.items() if info.get("status") == "active")
    processed = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id, info in users_data.items():
        if info.get("status") == "active":
            try:
                if message_type == "photo":
                    await bot.send_photo(
                        chat_id=int(user_id),
                        photo=data["file_id"],
                        caption=data.get("caption", "")
                    )
                elif message_type == "video":
                    await bot.send_video(
                        chat_id=int(user_id),
                        video=data["file_id"],
                        caption=data.get("caption", "")
                    )
                elif message_type == "document":
                    await bot.send_document(
                        chat_id=int(user_id),
                        document=data["file_id"],
                        caption=data.get("caption", "")
                    )
                elif message_type == "audio":
                    await bot.send_audio(
                        chat_id=int(user_id),
                        audio=data["file_id"],
                        caption=data.get("caption", "")
                    )
                elif message_type == "voice":
                    await bot.send_voice(
                        chat_id=int(user_id),
                        voice=data["file_id"],
                        caption=data.get("caption", "")
                    )
                elif message_type == "video_note":
                    await bot.send_video_note(
                        chat_id=int(user_id),
                        video_note=data["file_id"]
                    )
                elif message_type == "text":
                    await bot.send_message(
                        chat_id=int(user_id),
                        text=data["text"]
                    )
                sent_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_count += 1

            processed += 1
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if processed % 10 == 0:
                await progress_message.edit_text(
                    f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {processed}/{total_users} —Å–æ–æ–±—â–µ–Ω–∏–π...\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
                )

            # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
            await asyncio.sleep(0.05)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await progress_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"- –û—à–∏–±–æ–∫: {error_count}"
    )

    await state.clear()


@router.callback_query(F.data == "cancel_broadcast")
async def callback_cancel_broadcast(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


@router.message(Command("debug_referrals"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_debug_referrals(message: types.Message) -> None:
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    from data import credited_referrals

    debug_text = "<b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö:</b>\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    debug_text += "<b>–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"
    for user_id, info in referral_data.items():
        username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        count = info.get("count", 0)
        activations = info.get("referral_activations", [])

        debug_text += f"–†–µ—Ñ–µ—Ä–µ—Ä: {username} ({user_id})\n"
        debug_text += f"–°—á–µ—Ç—á–∏–∫: {count}\n"
        debug_text += f"–ê–∫—Ç–∏–≤–∞—Ü–∏–∏: {', '.join(activations) if activations else '–Ω–µ—Ç'}\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    debug_text += "<b>–ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
    debug_text += ", ".join(credited_referrals) if credited_referrals else "–Ω–µ—Ç"

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    max_length = 4000
    if len(debug_text) > max_length:
        parts = [debug_text[i:i + max_length] for i in range(0, len(debug_text), max_length)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(debug_text)


@router.message(Command("reset_credited"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_reset_credited(message: types.Message) -> None:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    """
    from data import credited_referrals, save_credited_referrals

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    old_count = len(credited_referrals)

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    credited_referrals.clear()
    save_credited_referrals()

    await message.answer(f"‚úÖ –°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—á–∏—â–µ–Ω. –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {old_count} –∑–∞–ø–∏—Å–µ–π.")


@router.message(Command("fix_user"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_fix_user(message: types.Message) -> None:
    """
    –§–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–≤–µ–∑–¥—ã
    """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_user [user_id] [referrer_id]")
        return

    try:
        user_id = args[1]
        referrer_id = args[2] if len(args) > 2 else None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in users_data:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∑–≤–µ–∑–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
        if not users_data[user_id].get("stars_for_subscription_received", False):
            users_data[user_id]["stars_for_subscription_received"] = True
            users_data[user_id]["stars"] = users_data[user_id].get("stars", 0) + stars_per_referral
            save_users_data(users_data)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–≤–µ–∑–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
        if referrer_id and referrer_id in users_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            from data import credited_referrals, save_credited_referrals

            if user_id not in credited_referrals:
                credited_referrals.add(user_id)
                save_credited_referrals()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                if referrer_id in referral_data:
                    referral_data[referrer_id]["count"] = referral_data[referrer_id].get("count", 0) + 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if "referral_activations" not in referral_data[referrer_id]:
                        referral_data[referrer_id]["referral_activations"] = []

                    if user_id not in referral_data[referrer_id]["referral_activations"]:
                        referral_data[referrer_id]["referral_activations"].append(user_id)

                    save_referral_data(referral_data)
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    referral_data[referrer_id] = {
                        "bot_link": f"https://t.me/{(await bot.get_me()).username}?start={referrer_id}",
                        "count": 1,
                        "username": users_data[referrer_id]["username"],
                        "referral_activations": [user_id]
                    }
                    save_referral_data(referral_data)

                # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                users_data[referrer_id]["stars"] = users_data[referrer_id].get("stars", 0) + stars_per_referral
                save_users_data(users_data)

                await message.answer(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª –¥–ª—è {referrer_id}, –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–≤–µ–∑–¥—ã")
            else:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
@router.callback_query(F.data == "manage_channels")
async def callback_manage_channels(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"

    if not required_channels:
        channels_text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
    else:
        channels_text += "<b>–¢–µ–∫—É—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
        for i, channel in enumerate(required_channels, 1):
            channels_text += f"{i}. {channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {channel.get('link', '–ë–µ–∑ —Å—Å—ã–ª–∫–∏')}\n"
        channels_text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã
    if required_channels:
        keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="edit_channel")])
        keyboard.append([InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="delete_channel")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞
    keyboard.append([InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞", callback_data="check_bot_rights")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(channels_text, reply_markup=inline_kb)
    await callback.answer()


@router.callback_query(F.data == "back_to_admin")
async def callback_back_to_admin(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await cmd_admin(callback.message)
    await callback.answer()


@router.callback_query(F.data == "add_channel")
async def callback_add_channel(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await callback.message.answer(
        "üî∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–ï—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:\n\n"
        "1Ô∏è‚É£ <b>–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
        "2Ô∏è‚É£ <b>–£–∫–∞–∑–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤—Ä—É—á–Ω—É—é</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: -100xxxxxxxxxx\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:\n"
        "- –î–æ–±–∞–≤—å—Ç–µ @username_to_id_bot –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
        "- –ë–æ—Ç –≤–µ—Ä–Ω–µ—Ç ID –∫–∞–Ω–∞–ª–∞"
    )
    await state.set_state(AdminStates.waiting_for_channel_id)
    await callback.answer()


@router.message(AdminStates.waiting_for_channel_id)
async def process_channel_id(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –∏–∑ –∫–∞–Ω–∞–ª–∞
    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        channel_id = str(message.forward_from_chat.id)
        channel_title = message.forward_from_chat.title

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_title} (ID: {channel_id})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            bot_member = await bot.get_chat_member(int(channel_id), (await bot.get_me()).id)

            if bot_member.status not in ["administrator", "creator"]:
                await message.answer(
                    "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
                    "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                    "- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ –∏–º—è
            await state.update_data(channel_id=channel_id, chat_title=channel_title)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            try:
                chat = await bot.get_chat(int(channel_id))
                if chat.username:
                    channel_link = f"https://t.me/{chat.username}"
                    await state.update_data(channel_link=channel_link)

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await message.answer(
                        f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_title}</b> –Ω–∞–π–¥–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.\n\n"
                        f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_link}\n\n"
                        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Å–µ–π—á–∞—Å.\n"
                        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É", callback_data="use_suggested_link")]
                        ])
                    )
                    await state.set_state(AdminStates.waiting_for_channel_link)
                    return
                else:
                    # –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç username, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é
                    await message.answer(
                        f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_title}</b> –Ω–∞–π–¥–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://t.me/):"
                    )
                    await state.set_state(AdminStates.waiting_for_channel_link)
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
                await message.answer(
                    f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_title}</b> –Ω–∞–π–¥–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://t.me/):"
                )
                await state.set_state(AdminStates.waiting_for_channel_link)
                return

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤—Ä—É—á–Ω—É—é:"
            )
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ ID –≤—Ä—É—á–Ω—É—é
    channel_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞
    if not (channel_id.startswith("-100") and channel_id[4:].isdigit()):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
    try:
        chat = await bot.get_chat(int(channel_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        bot_member = await bot.get_chat_member(int(channel_id), (await bot.get_me()).id)

        if bot_member.status not in ["administrator", "creator"]:
            await message.answer(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
                "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                "- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞
        await state.update_data(channel_id=channel_id, chat_title=chat.title)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if chat.username:
            channel_link = f"https://t.me/{chat.username}"
            await state.update_data(channel_link=channel_link)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª <b>{chat.title}</b> –Ω–∞–π–¥–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.\n\n"
                f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_link}\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Å–µ–π—á–∞—Å.\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É", callback_data="use_suggested_link")]
                ])
            )
            await state.set_state(AdminStates.waiting_for_channel_link)
            return
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª <b>{chat.title}</b> –Ω–∞–π–¥–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://t.me/):"
            )
            await state.set_state(AdminStates.waiting_for_channel_link)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )


@router.callback_query(F.data == "use_suggested_link")
async def callback_use_suggested_link(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    data = await state.get_data()
    channel_link = data.get("channel_link")
    chat_title = data.get("chat_title")

    if not channel_link:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
    await callback.message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∞: {channel_link}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {chat_title}):"
    )
    await state.set_state(AdminStates.waiting_for_channel_name)
    await callback.answer()


@router.message(AdminStates.waiting_for_channel_link)
async def process_channel_link(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    channel_link = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    if not (channel_link.startswith("https://t.me/") or channel_link.startswith("http://t.me/")):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    await state.update_data(channel_link=channel_link)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {data.get('chat_title', '–ö–∞–Ω–∞–ª')}):"
    )
    await state.set_state(AdminStates.waiting_for_channel_name)


@router.message(AdminStates.waiting_for_channel_name)
async def process_channel_name(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    channel_name = message.text.strip()
    data = await state.get_data()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ Telegram
    if not channel_name:
        channel_name = data.get('chat_title', '–ö–∞–Ω–∞–ª')

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
    new_channel = {
        "id": data.get("channel_id"),
        "link": data.get("channel_link"),
        "name": channel_name
    }

    required_channels.append(new_channel)
    save_required_channels()

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
    channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
    channels_text += "<b>–¢–µ–∫—É—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"

    for i, channel in enumerate(required_channels, 1):
        channels_text += f"{i}. {channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {channel.get('link', '–ë–µ–∑ —Å—Å—ã–ª–∫–∏')}\n"

    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="edit_channel")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="delete_channel")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞", callback_data="check_bot_rights")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(channels_text, reply_markup=inline_kb)
    await state.clear()


@router.callback_query(F.data == "edit_channel")
async def callback_edit_channel(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    if not required_channels:
        await callback.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = []
    for i, channel in enumerate(required_channels, 1):
        keyboard.append([InlineKeyboardButton(
            text=f"{i}. {channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
            callback_data=f"edit_channel_{i - 1}"
        )])

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")])

    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=inline_kb
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_channel_"))
async def callback_select_channel_to_edit(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    index = int(callback.data.split("_")[-1])

    if index >= len(required_channels):
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    channel = required_channels[index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–∞–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(edit_channel_index=index)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton(text="ID –∫–∞–Ω–∞–ª–∞", callback_data="edit_field_id")],
        [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="edit_field_link")],
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_channel")]
    ]

    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        f"–ö–∞–Ω–∞–ª: <b>{channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"ID: <code>{channel.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"–°—Å—ã–ª–∫–∞: {channel.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=inline_kb
    )
    await callback.answer()


@router.callback_query(F.data == "edit_field_id")
async def callback_edit_field_id(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await callback.message.answer(
        "üî∏ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: -100xxxxxxxxxx\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ @username_to_id_bot –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
        "3. –ë–æ—Ç –≤–µ—Ä–Ω–µ—Ç ID –∫–∞–Ω–∞–ª–∞"
    )
    await state.set_state(AdminStates.waiting_for_edit_channel_id)
    await callback.answer()


@router.message(AdminStates.waiting_for_edit_channel_id)
async def process_edit_channel_id(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id not in ADMIN_IDS:
        return

    channel_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞
    if not (channel_id.startswith("-100") and channel_id[4:].isdigit()):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
    try:
        chat = await bot.get_chat(int(channel_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        bot_member = await bot.get_chat_member(int(channel_id), (await bot.get_me()).id)

        if bot_member.status not in ["administrator", "creator"]:
            await message.answer(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
                "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                "- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        data = await state.get_data()
        index = data.get("edit_channel_index")

        if index is not None and index < len(required_channels):
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞
            required_channels[index]["id"] = channel_id
            save_required_channels()

            await message.answer(
                f"‚úÖ ID –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <code>{channel_id}</code> ({chat.title})"
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
            channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
            channels_text += "<b>–¢–µ–∫—É—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"

            for i, channel in enumerate(required_channels, 1):
                channels_text += f"{i}. {channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {channel.get('link', '–ë–µ–∑ —Å—Å—ã–ª–∫–∏')}\n"

            keyboard = [
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="edit_channel")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="delete_channel")],
                [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞", callback_data="check_bot_rights")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ]

            inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

            await message.answer(channels_text, reply_markup=inline_kb)
            await state.clear()
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
            await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )


@router.callback_query(F.data == "delete_channel")
async def callback_delete_channel(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    if not required_channels:
        await callback.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = []
    for i, channel in enumerate(required_channels, 1):
        keyboard.append([InlineKeyboardButton(
            text=f"{i}. {channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
            callback_data=f"delete_channel_{i - 1}"
        )])

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")])

    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=inline_kb
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_channel_"))
async def callback_confirm_delete_channel(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    index = int(callback.data.split("_")[-1])

    if index >= len(required_channels):
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    channel = required_channels[index]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{index}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete_channel")]
    ]

    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª <b>{channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö?",
        reply_markup=inline_kb
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def callback_perform_delete_channel(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    index = int(callback.data.split("_")[-1])

    if index >= len(required_channels):
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —É–¥–∞–ª—è–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    channel_name = required_channels[index].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    del required_channels[index]
    save_required_channels()

    await callback.answer(f"–ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
    await callback_manage_channels(callback)


@router.callback_query(F.data == "check_bot_rights")
async def callback_check_bot_rights(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    if not required_channels:
        await callback.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    process_message = await callback.message.edit_text(
        "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö</b>\n\n"
        "–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    bot_id = (await bot.get_me()).id
    results = []

    for channel in required_channels:
        channel_id = channel.get('id')
        channel_name = channel.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            chat = await bot.get_chat(int(channel_id))
            bot_member = await bot.get_chat_member(int(channel_id), bot_id)

            if bot_member.status == "administrator":
                results.append(f"‚úÖ {channel_name} - –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            elif bot_member.status == "creator":
                results.append(f"‚úÖ {channel_name} - –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º")
            else:
                results.append(f"‚ùå {channel_name} - –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Å—Ç–∞—Ç—É—Å: {bot_member.status})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            results.append(f"‚ùå {channel_name} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞</b>\n\n"
    for result in results:
        report += f"{result}\n"

    report += "\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    report += "- –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö\n"
    report += "- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–æ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    report += "- –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–æ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")]]
    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await process_message.edit_text(report, reply_markup=inline_kb)
    await callback.answer()