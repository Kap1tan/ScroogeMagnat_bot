# –í —Ñ–∞–π–ª–µ start.py
# –ò–∑–º–µ–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ

import logging
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot import bot, router
from config import ADMIN_IDS
from data import referral_data, users_data, stars_per_referral, required_channels
from utils import save_referral_data, save_users_data, get_stars_word, get_invite_word
from handlers.subscription import check_subscription, get_subscription_keyboard, get_not_subscribed_channels, \
    get_channels_text
from handlers.captcha_handler import CaptchaStates, generate_captcha


async def register_user(user: types.User) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ.
    –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True,
    –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.
    """
    user_id = str(user.id)
    if user_id not in users_data:
        users_data[user_id] = {
            "username": user.username or user.full_name,
            "status": "active",
            "stars": 0,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∑–≤—ë–∑–¥ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å)
            "stars_for_subscription_received": False  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
        }
        save_users_data(users_data)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = (
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"<a href='tg://user?id={user.id}'>{user.username or user.full_name}</a>"
        )
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, message_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        return True
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –Ω–æ —Å—Ç–∞—Ç—É—Å "removed", –º–µ–Ω—è–µ–º –Ω–∞ "active"
    elif users_data[user_id].get("status") == "removed":
        users_data[user_id]["status"] = "active"
        save_users_data(users_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ stars_for_subscription_received –∏ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "stars_for_subscription_received" not in users_data[user_id]:
        users_data[user_id]["stars_for_subscription_received"] = False
        save_users_data(users_data)

    return False


async def process_subscriber(chat: types.Chat, user: types.User) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: —Å–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –≤—ã–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞.
    """
    user_id = str(user.id)

    logging.info(f"=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò –î–õ–Ø {user_id} ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(int(user_id))
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(int(user_id))
        channels_text = get_channels_text(not_subscribed_channels)

        await bot.send_message(
            chat.id,
            f"‚ùó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_username = bot_info.username

    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    if str(user_id) not in referral_data:
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {user_id}")
        referral_data[str(user_id)] = {
            "bot_link": f"https://t.me/{bot_username}?start={user_id}",
            "count": 0,
            "username": user.username or user.full_name,
            "referral_activations": []  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        }
        save_referral_data(referral_data)

    bot_link = referral_data[str(user_id)].get("bot_link") or f"https://t.me/{bot_username}?start={user_id}"
    referral_data[str(user_id)]["bot_link"] = bot_link
    save_referral_data(referral_data)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stars = users_data.get(str(user_id), {}).get("stars", 0)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    from utils import load_json_data
    stars_config = load_json_data("data/config.json")
    current_stars_per_referral = stars_config.get("stars_per_referral", 2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id} —Å {current_stars_per_referral} –∑–≤–µ–∑–¥–∞–º–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
    await bot.send_message(
        chat.id,
        f"‚úÖ <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"<code>{bot_link}</code>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏! –ö–æ–≥–¥–∞ –æ–Ω–∏ –ø–µ—Ä–µ–π–¥—É—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, "
        f"–≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{current_stars_per_referral} {get_stars_word(current_stars_per_referral)}</b> –∏ +1 –∫ —Å—á–µ—Ç—á–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö.\n\n"
        f"üí´ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_stars} {get_stars_word(user_stars)}</b>"
    )


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ensure_user_registered(message.from_user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    args = message.text.split()
    if len(args) > 1:
        referrer_id = args[1]
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if referrer_id.isdigit() and referrer_id in users_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏
            await state.update_data(referrer_id=referrer_id)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
            user_id = str(message.from_user.id)

            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ä—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ä–µ—Ñ–µ—Ä–µ—Ä {referrer_id}")

            if referrer_id in referral_data:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
                if "referral_activations" not in referral_data[referrer_id]:
                    referral_data[referrer_id]["referral_activations"] = []
                    logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ —Å—Å—ã–ª–∫—É
                if user_id not in referral_data[referrer_id]["referral_activations"]:
                    referral_data[referrer_id]["referral_activations"].append(user_id)
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}")
                    save_referral_data(referral_data)
                    logging.info(f"–î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                else:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}")
            else:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                referral_data[referrer_id] = {
                    "bot_link": f"https://t.me/{(await bot.get_me()).username}?start={referrer_id}",
                    "count": 0,
                    "username": users_data[referrer_id]["username"],
                    "referral_activations": [user_id]
                }
                logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                save_referral_data(referral_data)
                logging.info(f"–î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            channels_count = len(required_channels)
            channels_info = ""
            if channels_count > 0:
                if channels_count == 1:
                    channels_info = f"\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª."
                elif 2 <= channels_count <= 4:
                    channels_info = f"\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channels_count} –∫–∞–Ω–∞–ª–∞."
                else:
                    channels_info = f"\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channels_count} –∫–∞–Ω–∞–ª–æ–≤."

            await message.answer(
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É "
                f"–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.{channels_info}"
            )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É
    data = await state.get_data()
    captcha_passed = data.get("captcha_passed", False)

    if not captcha_passed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        captcha_word, captcha_message = await generate_captcha()
        await state.update_data(captcha_word=captcha_word)
        await state.set_state(CaptchaStates.waiting_for_captcha)
        await message.answer(captcha_message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        text = (
            '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n'
            f'–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n'
            f'{channels_text}'
        )
        await message.answer(text, reply_markup=get_subscription_keyboard())
    else:
        await show_main_menu(message)


@router.message(Command("link"))
async def cmd_link(message: types.Message, state: FSMContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É
    data = await state.get_data()
    captcha_passed = data.get("captcha_passed", False)

    if not captcha_passed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        captcha_word, captcha_message = await generate_captcha()
        await state.update_data(captcha_word=captcha_word)
        await state.set_state(CaptchaStates.waiting_for_captcha)
        await message.answer(captcha_message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await process_subscriber(message.chat, message.from_user)


async def show_main_menu(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.
    """
    text = (
        '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n'
        "üí´ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã:</b>\n"
        "- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "- –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã –Ω–∞ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from handlers.keyboard_handler import get_main_keyboard
    await message.answer(text, reply_markup=get_main_keyboard())


@router.callback_query(F.data == "check_subscription")
async def callback_check_subscription(callback: types.CallbackQuery) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ensure_user_registered(callback.from_user)

    user_id = str(callback.from_user.id)
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–ª–±—ç–∫–∞: user_id={user_id}")

    is_subscribed = await check_subscription(callback.from_user.id)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {is_subscribed}")

    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∏–ª –ª–∏ –æ–Ω —É–∂–µ –∑–≤–µ–∑–¥—ã
        stars_for_subscription_received = users_data.get(user_id, {}).get("stars_for_subscription_received", False)
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: {stars_for_subscription_received}")

        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª, –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
        if not stars_for_subscription_received and user_id in users_data:
            users_data[user_id]["stars_for_subscription_received"] = True
            save_users_data(users_data)
            logging.info(f"–û—Ç–º–µ—á–µ–Ω–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥
            from handlers.keyboard_handler import get_main_keyboard

            text = (
                '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</b>\n\n'
                "üí´ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã:</b>\n"
                "- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "- –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã –Ω–∞ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
        else:
            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª—É—á–∞–ª –∑–≤–µ–∑–¥—ã, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            from handlers.keyboard_handler import get_main_keyboard

            text = (
                '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</b>\n\n'
                "üí´ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã:</b>\n"
                "- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "- –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã –Ω–∞ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )

        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await callback.message.answer(text, reply_markup=get_main_keyboard())
    else:
        not_subscribed_channels = await get_not_subscribed_channels(callback.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await callback.answer(f"–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                              show_alert=True)


async def ensure_user_registered(user: types.User) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ,
    –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤,
    —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.
    """
    user_id = str(user.id)
    if user_id not in users_data:
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        users_data[user_id] = {
            "username": user.username or user.full_name,
            "status": "active",
            "stars": 0,
            "stars_for_subscription_received": False
        }
        save_users_data(users_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = (
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"<a href='tg://user?id={user.id}'>{user.username or user.full_name}</a>"
        )
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, message_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    elif users_data[user_id].get("status") == "removed":
        users_data[user_id]["status"] = "active"
        save_users_data(users_data)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ stars_for_subscription_received, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "stars_for_subscription_received" not in users_data[user_id]:
        users_data[user_id]["stars_for_subscription_received"] = False
        save_users_data(users_data)


# –î–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∞–º—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
# –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –ø–µ—Ä–µ–¥ –Ω–∏–º
@router.message(F.text, flags={"allow_in_processed": True})
async def process_unknown_message(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –ø–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ensure_user_registered(message.from_user)

    from handlers.keyboard_handler import show_profile, promo_code_request, show_ref_link, show_reviews, show_channel

    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–º–æ–∫–æ–¥
    if current_state == "PromoStates:waiting_for_promo":
        from handlers.keyboard_handler import process_promo_code
        await process_promo_code(message, state)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–∞–ø—á–∏, –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if current_state == "CaptchaStates:waiting_for_captcha":
        # –ü–µ—Ä–µ–¥–∞–¥–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫
    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await show_profile(message, state)
    elif text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥":
        await promo_code_request(message, state)
    elif text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
        await show_ref_link(message, state)
    elif text == "‚≠ê –û—Ç–∑—ã–≤—ã":
        await show_reviews(message, state)
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        await show_channel(message, state)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/link - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
        )