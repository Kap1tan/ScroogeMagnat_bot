# handlers/keyboard_handler.py
import logging
from aiogram import types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import router, bot
from config import ADMIN_IDS
from data import users_data, referral_data, promocodes, save_promocodes, required_channels
from utils import get_stars_word, get_invite_word, save_users_data, save_referral_data
from handlers.subscription import check_subscription, get_subscription_keyboard, get_not_subscribed_channels, \
    get_channels_text


class PromoStates(StatesGroup):
    waiting_for_promo = State()


async def ensure_user_registered(user: types.User) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ,
    –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.
    """
    user_id = str(user.id)

    logging.info(f"=== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if user_id not in referral_data:
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {user_id}")
        bot_info = await bot.get_me()
        referral_data[user_id] = {
            "bot_link": f"https://t.me/{bot_info.username}?start={user_id}",
            "count": 0,
            "username": user.username or user.full_name,
            "referral_activations": []
        }
        save_referral_data(referral_data)

    if user_id not in users_data:
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ keyboard_handler: {user_id}")
        users_data[user_id] = {
            "username": user.username or user.full_name,
            "status": "active",
            "stars": 0,
            "stars_for_subscription_received": False
        }
        save_users_data(users_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = (
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"<a href='tg://user?id={user.id}'>{user.username or user.full_name}</a>"
        )
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, message_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    elif users_data[user_id].get("status") == "removed":
        users_data[user_id]["status"] = "active"
        save_users_data(users_data)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ stars_for_subscription_received, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "stars_for_subscription_received" not in users_data[user_id]:
        users_data[user_id]["stars_for_subscription_received"] = False
        save_users_data(users_data)


# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
    """
    keyboard = [
        [types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")],
        [types.KeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥"), types.KeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")],
        [types.KeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª")]  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Ç—Ä–µ—Ç—å—é —Å—Ç—Ä–æ–∫—É
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∏–º—è, ID, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(message.from_user)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = users_data.get(user_id, {})
    stars = user_data.get("stars", 0)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    ref_count = referral_data.get(user_id, {}).get("count", 0)

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üôã‚Äç‚ôÇÔ∏è –ò–º—è: {username}\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üí´ –ó–≤–µ–∑–¥—ã: {stars} {get_stars_word(stars)}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count} {get_invite_word(ref_count)}\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥
    inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã", callback_data="withdraw_stars")]
    ])

    await message.answer(profile_text, reply_markup=inline_kb)


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (show_reviews, promo_code_request, process_promo_code, show_ref_link, show_channel, callback_cancel_withdraw)
# –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Ç–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å ensure_user_registered –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞


@router.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def show_reviews(message: types.Message, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(message.from_user)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–∑—ã–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await message.answer(
        "‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π:\n"
        "https://t.me/ScroogeMagnat_Otz"
    )


@router.message(F.text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥")
async def promo_code_request(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(message.from_user)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await message.answer(
        "üéü <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥."
    )
    await state.set_state(PromoStates.waiting_for_promo)


@router.message(PromoStates.waiting_for_promo)
async def process_promo_code(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(message.from_user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        await state.clear()
        return

    promo_code = message.text.strip().upper()
    user_id = str(message.from_user.id)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    from data import promocodes, save_promocodes

    if promo_code in promocodes:
        promo_data = promocodes[promo_code]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        if promo_data.get("is_single_use", False) and user_id in promo_data.get("used_by", []):
            await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        if "limit" in promo_data and promo_data.get("activations", 0) >= promo_data["limit"]:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            await state.clear()
            return

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
        stars_amount = promo_data.get("stars", 0)
        if stars_amount > 0:
            if user_id in users_data:
                users_data[user_id]["stars"] = users_data[user_id].get("stars", 0) + stars_amount
                save_users_data(users_data)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                if promo_data.get("is_single_use", False):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö
                    if "used_by" not in promo_data:
                        promo_data["used_by"] = []
                    promo_data["used_by"].append(user_id)

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
                promo_data["activations"] = promo_data.get("activations", 0) + 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                save_promocodes()

                await message.answer(
                    f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars_amount} {get_stars_word(stars_amount)}\n"
                    f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['stars']} {get_stars_word(users_data[user_id]['stars'])}"
                )
            else:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        else:
            await message.answer("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

    await state.clear()

@router.message(F.text == "üì¢ –ö–∞–Ω–∞–ª")
async def show_channel(message: types.Message, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(message.from_user)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await message.answer(
        "üì¢ <b>–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª</b>\n\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:\n"
        "https://t.me/ScroogeMagnat_Info"
    )

@router.message(F.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def show_ref_link(message: types.Message, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(message.from_user)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        not_subscribed_channels = await get_not_subscribed_channels(message.from_user.id)
        channels_text = get_channels_text(not_subscribed_channels)

        await message.answer(
            f"‚ùó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n{channels_text}",
            reply_markup=get_subscription_keyboard()
        )
        return

    from handlers.start import process_subscriber
    await process_subscriber(message.chat, message.from_user)


@router.callback_query(F.data == "cancel_withdraw")
async def callback_cancel_withdraw(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    await ensure_user_registered(callback.from_user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(callback.from_user.id)
    if not is_subscribed:
        await callback.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.",
                              show_alert=True)
        return

    user_id = str(callback.from_user.id)
    username = callback.from_user.username or callback.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = users_data.get(user_id, {})
    stars = user_data.get("stars", 0)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    ref_count = referral_data.get(user_id, {}).get("count", 0)

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üôã‚Äç‚ôÇÔ∏è –ò–º—è: {username}\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üí´ –ó–≤–µ–∑–¥—ã: {stars} {get_stars_word(stars)}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count} {get_invite_word(ref_count)}\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã", callback_data="withdraw_stars")]
    ])

    await callback.message.edit_text(profile_text, reply_markup=inline_kb)
    await callback.answer()